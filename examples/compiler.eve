# Eve Code as records

if we encounter a `#compiler/record` without a variable, add one to it.

```
search @compiler
  record = [#compiler/record not(variable)]
commit @compiler
  record.variable += [#compiler/variable record]
```

Translate `#compiler/record` into scans.

```
search @compiler
  transform = [#compiler/transform scans: scan]
  scan = [#compiler/record attributes scopes variable]
  lookup[record: attributes, attribute: a, value: v]
bind @compiler
  transform.scans += [#compiler/scan scan e:variable, a, v, scopes]
```

Translate `#compiler/record` into insert actions.

```
search @compiler
  transform = [#compiler/transform binds: binding]
  binding = [#compiler/record attributes scopes variable]
  lookup[record: attributes, attribute: a, value: v]
  index = sort[value: a per: binding]
bind @compiler
  transform.expressions += [#compiler/expression binding operation:"generateId" | args: [index, v] results: [index:1, v: variable]]
  transform.binds += [#compiler/insert binding e:variable, a, v, scopes]
```

add non-projecting attributes to the bindings as well

```
search @compiler
  transform = [#compiler/transform binds: binding]
  binding = [#compiler/record non-projecting-attributes:attributes scopes variable]
  lookup[record: attributes, attribute: a, value: v]
bind @compiler
  transform.binds += [#compiler/insert binding e:variable, a, v, scopes]
```

Draw a transform

```
search @compiler
  transform = [#compiler/transform name]
  description = if transform.description then transform.description
                else "Descriptions are pretty cool, you should add one"
bind @browser
  [#div class:"transform" transform children:
    [#div class:"name" text: name]
    [#div class:"description" text: description]
    [#div #transform-code transform]
    [#div text: "=>"]
    [#div #transform-result transform]]
```

Draw record container with tags

```
search @compiler @browser
  parent = [#transform-code transform: [scans]]
  scans = [#compiler/record attributes: [tag] index]
  [#editor/color index color]
bind @browser
  parent.children +=
    [#div #record-div class:"record" style: [background: color] scans children:
      [#div children:
        [#span draggable:"true" text: "{{tag}}"]]]
```


```
search @compiler @browser @session
  parent = [#record-div scans]
  scans = [#compiler/record attributes]
  attribute = if lookup[record:attributes, attribute:a]
                 a != "tag" then a
              if lookup[record:[tag:attributes.tag] attribute:a]
                 a != "tag" then a
   (known, value) = if lookup[record:attributes, attribute value] then (true, value)
                   else (false, "")
   display-value = if value = [#compiler/variable] then attribute
                   if value = "" then attribute
                   else "{{attribute}}: {{value}}"
bind @browser
  parent.children += [#div class:"attributes" from:scans children:
                      [#div #record-attribute record:scans attribute known
                                              class:[attribute-known:known, attribute:true]
                                              text:display-value sort:attribute draggable:true]]
```

If we click on an attribute that isn't currently being looked for, add it to the lookup

```
search @browser @event @compiler
  c = [#click element: [#record-attribute known:false record attribute]]
commit @compiler
  var = [#compiler/variable c]
  lookup[record: record.attributes, attribute, value: var]
```

If we click on an attribute that *is* being looked for, remove it

```
search @browser @event @compiler
  c = [#click element: [#record-attribute known:true record attribute]]
commit @compiler
  lookup[record: record.attributes, attribute] := none
```


```
search @compiler @browser
  parent = [#transform-result transform: [binds]]
  binds = [#compiler/record from: [index] attributes]
  lookup[record: attributes, attribute, value]
  attribute != "tag"
  display-value = if value = [#compiler/variable] then attribute
                  else "{{attribute}}: {{value}}"
  [#editor/color index color]
bind @browser
  parent.children +=
    [#div #result-div class:[record:true] style: [background: color] binds children:
      [#div children:
        [#span text: "{{attributes.tag}}"]]
      [#div class:"attributes" children:
        [#div text: display-value]]]
```

```
search @browser
  d = [#result-div dragover:true class]
bind @browser
  class.dropping += true
```

```
search @browser @event
  d = [#dragenter element]
  element = [#result-div]
commit @browser
  element.dragover += true
```

```
search @browser @event
  d = [#dragleave element]
  element = [#result-div]
commit @browser
  element.dragover -= true
```

```css
{background: black; color: #ccc; }
  div { display:flex; flex-direction:column;}
  .transform { background:#333; color:#ccc; padding:20px; width:350px; position:absolute; right:40px; }
.transform .name { font-size:14pt; margin-bottom:10px; }
.transform .description { color: #aaf; margin-bottom:20px; }
.record { padding:5px 8px; margin-top:5px; margin-bottom: 5px; flex-direction:row; }
.record .attributes { flex-direction:row; margin-left: 10px; border-left:1px solid rgba(50,50,50,0.5); padding-left:10px; flex-wrap:wrap;}
.record .attributes * { cursor:pointer; }
.record .attributes * + * { margin-left:10px }
.record .attribute { color: #000; }
.record .attribute-known { color: #fff; }

.dropping { background: red; }

.pixel-container { flex-direction:row; flex-wrap:wrap; max-width:500px; }
.pixel { width:50px; height:50px; background: #555; color: #ccc; margin:10px; align-items:center; justify-content:center; cursor:pointer; }
.pixel.expanded { width:auto; height:auto; max-width:300px; max-height: 300px; overflow:auto; padding:15px; }
.pixel .attribute-pair { flex-direction:row; }
.pixel .attribute-pair .value { margin-left: 5px; }
```

Add some state for the editor

```
commit @compiler
  [#editor/app transform: [#compiler/transform name: "current query"]]
```

Make a tag explorer

```
commit @compiler
  [#editor/color index: 1 color: "#e91e63"]
  [#editor/color index: 2 color: "#9C27B0"]
  [#editor/color index: 3 color: "#009688"]
  [#editor/color index: 4 color: "yellow"]
  [#editor/color index: 5 color: "purple"]
```


```
search
  lookup[record, attribute: "tag", value]
bind @browser
  [#div #tag-browser class:"tag-browser" children:
    [#div #tag-button text: value]]
```

```
search @event @browser @compiler
  c = [#click element: [#tag-button text]]
  [#editor/app transform]
  ix = if transform.scans = [#compiler/record]
          total = count[given: transform.scans] then total + 1
       else 1
commit @compiler
  variable = [#compiler/variable from:c]
  scan = [#compiler/record variable index:ix attributes: [tag:text] scopes: "session"]
  transform.scans += scan
  text-variable = [#compiler/variable from:c]
  transform.expressions += [#compiler/expression c operation:"eve-internal/concat" | args: [index: 1, v: text] [index:2, v: " "] [index:3, v: variable] results: [index:1, v: text-variable]]
  child-var = [#compiler/variable from:scan]
  child = [#compiler/record variable:child-var from:scan attributes: [related:variable tag:("div","editor/pixel") editor-index:ix class:"pixel"] scopes: "browser"]
  parent = [#compiler/record from:scan attributes: [related:scan tag:("div") class: "pixel-container"] non-projecting-attributes: [children:child-var] scopes: "browser"]
  transform.binds += child
  transform.binds += parent
```

```
search @browser @compiler
  div = [#editor/pixel editor-index]
  [#editor/color index:editor-index color]
bind @browser
  div.style += [background: color]
```

## Pixels

Pixels by default list the id they're associated with

```
search @browser
  element = [#editor/pixel not(#editor/pixel/expanded) related]
bind @browser
  element.text += related
```

Pixels that are expanded show all their attributes, with tag being first

```
search @browser @session
  element = [#editor/pixel/expanded related]
bind @browser
  element.class += "expanded"
  element.children += [#div #editor/pixel-expansion children:
                        [#div #editor/pixel-tags children:
                          [#div text: related.tag]]
                        [#div #editor/pixel-attributes record:related]]
```

```
search @browser @session
  element = [#editor/pixel-attributes record]
  lookup[record, attribute, value]
  attribute != "tag"
bind @browser
  element.children += [#div class:"attribute-pair" attribute value sort:attribute children:
                        [#div text: "{{attribute}}:"]
                        [#div class:"value" text: value]]
```

clicking a pixel toggles whether it is expanded

```
search @event @browser
  c = [#click element]
  element = [#editor/pixel not(#editor/pixel/expanded)]
commit @browser
  element += #editor/pixel/expanded
```

```
search @event @browser
  c = [#click element]
  element = [#editor/pixel #editor/pixel/expanded]
commit @browser
  element -= #editor/pixel/expanded
```

Add some test data

```
bind
  [#foo value: "hey what's up?"]
  [#person name:"chris" age:29]
  [#person name:"rob" age:29]
  [#person name:"corey" age:30]
  [#person name:"jjosh" age:23]
  [#person name:"joey" pet: [#dog name:"beep"]]
```

Create a transform that looks for `#foo` records and adds a div with their `value` attribute as its text

```eve disabled
commit @compiler
  var1 = [#compiler/variable]
  var2 = [#compiler/variable]
  var3 = [#compiler/variable]
  var4 = [#compiler/variable]
  [#compiler/transform
    name: "cool stuff"
    description: "this is a test transform for us to use"
    scans: [#compiler/record variable:var1 attributes: [name:var2, tag:"person"] scopes: "session"]
    binds: [#compiler/record variable:var4 attributes: [tag:"div", text:var2, thing:var1, style:var3] scopes: "browser"]
           [#compiler/record variable:var3 attributes: [color:"red", parent:var1] scopes: "browser"]
  ]
```
