# Eve Code as records

Translate `#compiler/record` into scans.

```
search @compiler
  transform = [#compiler/transform scans: scan]
  scan = [#compiler/record attributes scopes not(variable)]
  lookup[record: attributes, attribute: a, value: v]
bind @compiler
  var = [#compiler/variable scan]
  transform.scans += [#compiler/scan scan e:var, a, v, scopes]
```

```
search @compiler
  transform = [#compiler/transform scans: scan]
  scan = [#compiler/record attributes scopes variable]
  lookup[record: attributes, attribute: a, value: v]
bind @compiler
  transform.scans += [#compiler/scan scan e:variable, a, v, scopes]
```

Translate `#compiler/record` into insert actions.

```
search @compiler
  transform = [#compiler/transform binds: binding]
  binding = [#compiler/record attributes scopes variable]
  lookup[record: attributes, attribute: a, value: v]
  index = sort[value: a per: binding]
bind @compiler
  transform.expressions += [#compiler/expression binding operation:"generateId" | args: [index, v] results: [index:1, v: variable]]
  transform.binds += [#compiler/insert binding e:variable, a, v, scopes]
```

```
search @compiler
  transform = [#compiler/transform binds: binding]
  binding = [#compiler/record attributes scopes not(variable)]
  lookup[record: attributes, attribute: a, value: v]
  index = sort[value: a per: binding]
bind @compiler
  var = [#compiler/variable binding]
  transform.expressions += [#compiler/expression binding operation:"generateId" | args: [index, v] results: [index:1, v: var]]
  transform.binds += [#compiler/insert binding e:var, a, v, scopes]
```

Draw a transform

```
search @compiler
  transform = [#compiler/transform name]
  description = if transform.description then transform.description
                else "Descriptions are pretty cool, you should add one"
bind @browser
  [#div class:"transform" transform children:
    [#div class:"name" text: name]
    [#div class:"description" text: description]
    [#div #transform-code transform]
    [#div text: "=>"]
    [#div #transform-result transform]]
```

Draw record container with tags

```
search @compiler @browser
  parent = [#transform-code transform: [scans]]
  scans = [#compiler/record attributes: [tag]]
bind @browser
  parent.children +=
    [#div #record-div class:"record" scans children:
      [#div children:
        [#span draggable:"true" text: "{{tag}}"]]]
```


```
search @compiler @browser
  parent = [#record-div scans]
  scans = [#compiler/record attributes]
  lookup[record: attributes, attribute, value]
  attribute != "tag"
  display-value = if value = [#compiler/variable] then attribute
                  else "{{attribute}}: {{value}}"
bind @browser
  parent.children += [#div children:
                      [#div text: display-value]]
```

```
search @compiler @browser
  parent = [#transform-result transform: [binds]]
  binds = [#compiler/record attributes]
  lookup[record: attributes, attribute, value]
  attribute != "tag"
  display-value = if value = [#compiler/variable] then attribute
                  else "{{attribute}}: {{value}}"
bind @browser
  parent.children +=
    [#div #result-div class:[record:true] binds children:
      [#div children:
        [#span text: "{{attributes.tag}}"]]
      [#div class:"attributes" children:
        [#div text: display-value]]]
```

```
search @browser
  d = [#result-div dragover:true class]
bind @browser
  [#div text: "DROPPING! {{d}}"]
  class.dropping += true
```

```
search @browser @event
  d = [#drop element]
commit @browser
  [#div d text: "dropped on: {{element}}"]
```

```
search @browser @event
  d = [#dragenter element]
  element = [#result-div]
commit @browser
  [#div d text: "ENTER {{element}}"]
  element.dragover += true
```

```
search @browser @event
  d = [#dragleave element]
  element = [#result-div]
commit @browser
  [#div d text: "LEAVE {{element}}"]
  element.dragover -= true
```

```css
  div { display:flex; flex-direction:column;}
  .transform { background:#222; color:#ccc; padding:20px; width:300px; position:absolute; right:40px; }
.transform .name { font-size:14pt; margin-bottom:10px; }
.transform .description { color: #aaf; margin-bottom:20px; }
.record { border: 1px solid #999; padding:5px 8px; margin-top:10px; margin-bottom: 10px; flex-direction:row; }
.record .attributes { flex-direction:row; margin-left: 10px; border-left:1px solid #666; padding-left:10px }
.record .attributes * + * { margin-left:10px }

.dropping { background: red; }

.pixel { width:50px; height:50px; background: #555; color: #ccc; margin:10px; }
```

Add some state for the editor

```
commit @compiler
  [#editor/app transform: [#compiler/transform name: "current query"]]
```

Make a tag explorer

```
search
  lookup[record, attribute: "tag", value]
bind @browser
  [#div #tag-button text: value]
```

```
search @event @browser @compiler
  c = [#click element: [#tag-button text]]
  [#editor/app transform]
commit @compiler
  variable = [#compiler/variable from:c]
  scan = [#compiler/record variable attributes: [tag:text] scopes: "session"]
  transform.scans += scan
  text-variable = [#compiler/variable from:c]
  transform.expressions += [#compiler/expression c operation:"eve-internal/concat" | args: [index: 1, v: text] [index:2, v: " "] [index:3, v: variable] results: [index:1, v: text-variable]]
  transform.binds += [#compiler/record from:scan attributes: [related:variable tag:"div" class:"pixel" text: text-variable] scopes: "browser"]
```

Add some test data

```
bind
  [#foo value: "hey what's up?"]
  [#person name:"chris" age:29]
  [#person name:"rob" age:29]
  [#person name:"corey" age:30]
  [#person name:"jjosh" age:23]
  [#person name:"joey" pet: [#dog name:"beep"]]
```

Create a transform that looks for `#foo` records and adds a div with their `value` attribute as its text

```eve disabled
commit @compiler
  var1 = [#compiler/variable]
  var2 = [#compiler/variable]
  var3 = [#compiler/variable]
  var4 = [#compiler/variable]
  [#compiler/transform
    name: "cool stuff"
    description: "this is a test transform for us to use"
    scans: [#compiler/record variable:var1 attributes: [name:var2, tag:"person"] scopes: "session"]
    binds: [#compiler/record variable:var4 attributes: [tag:"div", text:var2, thing:var1, style:var3] scopes: "browser"]
           [#compiler/record variable:var3 attributes: [color:"red", parent:var1] scopes: "browser"]
  ]
```
